system(paste("cp ",paste(files)," DESeq2/metadata/",sep=""))
m <- read.table(files, sep="\t", header=TRUE,na.strings =c("","NaN"),quote=NULL,stringsAsFactors=F,dec=".",fill=TRUE,row.names = 1)
#make sure m is factor where needed
names(m) = gsub("Condition..","condition_",names(m))
conditions = names(m)[grepl("condition_",names(m))]
setwd("~/Documents/QBOBA")
###3) load metadata
setwd(path)
files = list.files(path,pattern = "sample_preparation")
source('~/Documents/DESeq2/QCCTT/DESeq.v2.7.R')
setwd("~/Documents/QBOBA")
source('~/Documents/DESeq2/QCCTT/DESeq.v2.7.R')
source('~/Documents/DESeq2/QCCTT/DESeq.v2.7.R')
source('~/Documents/DESeq2/QCCTT/DESeq.v2.7.R')
setwd("~/Documents/QBOBA/report")
sessionInfo()
sessionInfo()
Sys.setlocale("LC_ALL","C")
sessionInfo()
sessionInfo()
Sys.setlocale("LC_ALL", 'de_DE.UTF-8')
Test
=====
Simple test markdown for use with knitr
```{r dev='svg'}
plot(1:20,(1:20)^2)
```
?opts_knit
sessionInfo()
install.packages(c("callr", "rmarkdown"))
install.packages("pandoc")
setwd("~/Documents/QBOBA/report")
?datatable
??datatable
??datatable
colnames(df_DE)
library(DT)
df_DE <- read.table("./multiqc_data/multiqc_general_stats.txt", header=TRUE, sep="\t", nrows=1000)
colnames(df_DE)
library(DT)
df_DE <- read.table("./multiqc_data/multiqc_general_stats.txt", header=TRUE, sep="\t", nrows=1000)
colnames(df_DE)
datatable(df_DE, caption = "Final list DeSEQ2", extensions = c('Buttons', 'FixedColumns'), "Autofill", options = list(dom = 'Bfrtip', scrollX = T, scrollCollapse = T, buttons = c('copy', 'csv', 'excel', 'pdf', 'print')), escapeColNames = 'Cutadapt_mqc.generalstats.cutadapt.percent_trimmed')
datatable(df_DE, caption = "Final list DeSEQ2", extensions = c('Buttons', 'FixedColumns'), "Autofill", options = list(dom = 'Bfrtip', scrollX = T, scrollCollapse = T, buttons = c('copy', 'csv', 'excel', 'pdf', 'print')), escape = 'Cutadapt_mqc.generalstats.cutadapt.percent_trimmed')
datatable(df_DE, caption = "Final list DeSEQ2", extensions = c('Buttons', 'FixedColumns'), "Autofill", options = list(dom = 'Bfrtip', scrollX = T, scrollCollapse = T, buttons = c('copy', 'csv', 'excel', 'pdf', 'print')), escape = 2)
datatable(df_DE, caption = "Final list DeSEQ2", extensions = c('Buttons', 'FixedColumns'), "Autofill", options = list(dom = 'Bfrtip', scrollX = T, scrollCollapse = T, buttons = c('copy', 'csv', 'excel', 'pdf', 'print')), escape = 3)
View(df_DE)
library(DT)
df_DE <- read.table("./multiqc_data/multiqc_general_stats.txt", header=TRUE, sep="\t", nrows=1000)
datatable(df_DE, caption = "Final list DeSEQ2", , escape = 3, extensions = c('Buttons', 'FixedColumns'), "Autofill", options = list(dom = 'Bfrtip', scrollX = T, scrollCollapse = T, buttons = c('copy', 'csv', 'excel', 'pdf', 'print')))
datatable(df_DE, caption = "Final list DeSEQ2", escape = 3, extensions = c('Buttons', 'FixedColumns'), "Autofill", options = list(dom = 'Bfrtip', scrollX = T, scrollCollapse = T, buttons = c('copy', 'csv', 'excel', 'pdf', 'print')))
datatable(df_DE, caption = "Final list DeSEQ2", escape = 1, extensions = c('Buttons', 'FixedColumns'), "Autofill", options = list(dom = 'Bfrtip', scrollX = T, scrollCollapse = T, buttons = c('copy', 'csv', 'excel', 'pdf', 'print')))
datatable(df_DE, caption = "Final list DeSEQ2", escape = 2, extensions = c('Buttons', 'FixedColumns'), "Autofill", options = list(dom = 'Bfrtip', scrollX = T, scrollCollapse = T, buttons = c('copy', 'csv', 'excel', 'pdf', 'print')))
datatable(help)
??datatable(help)
??datatable
View(df_DE)
View(df_DE)
datatable(df_DE[,2:], caption = "Final list DeSEQ2", extensions = c('Buttons', 'FixedColumns'), "Autofill", options = list(dom = 'Bfrtip', scrollX = T, scrollCollapse = T, buttons = c('copy', 'csv', 'excel', 'pdf', 'print')))
datatable(df_DE[,2:], caption = "Final list DeSEQ2", extensions = c('Buttons', 'FixedColumns'), "Autofill", options = list(dom = 'Bfrtip', scrollX = T, scrollCollapse = T, buttons = c('copy', 'csv', 'excel', 'pdf', 'print')))
datatable(df_DE[,2:], caption = "Final list DeSEQ2", extensions = c('Buttons', 'FixedColumns'), "Autofill", options = list(dom = 'Bfrtip', scrollX = T, scrollCollapse = T, buttons = c('copy', 'csv', 'excel', 'pdf', 'print')))
datatable(df_DE[2:], caption = "Final list DeSEQ2", extensions = c('Buttons', 'FixedColumns'), "Autofill", options = list(dom = 'Bfrtip', scrollX = T, scrollCollapse = T, buttons = c('copy', 'csv', 'excel', 'pdf', 'print')))
df[,2:]
df_DE[,2:]
df_DE[[,2:]]
df_DE[[,2:]]
datatable(df_DE.loc[2:], caption = "Final list DeSEQ2", extensions = c('Buttons', 'FixedColumns'), "Autofill", options = list(dom = 'Bfrtip', scrollX = T, scrollCollapse = T, buttons = c('copy', 'csv', 'excel', 'pdf', 'print')))
datatable(df_DE.loc[,2:], caption = "Final list DeSEQ2", extensions = c('Buttons', 'FixedColumns'), "Autofill", options = list(dom = 'Bfrtip', scrollX = T, scrollCollapse = T, buttons = c('copy', 'csv', 'excel', 'pdf', 'print')))
df_de.loc[,2:]
library(DT)
library(DT)
df_de.loc[,2:]
df_de.loc[,-1]
df_DE.loc[,-1]
df_DE <- read.table("./multiqc_data/multiqc_general_stats.txt", header=TRUE, sep="\t")
df_DE2 <- as.data.frame(df_DE)
#myvars <- c("v1", "v2", "v3")
#newdata <- mydata[myvars]
datatable(df_DE2[,2:], caption = "Final list DeSEQ2", extensions = c('Buttons', 'FixedColumns'), "Autofill", options = list(dom = 'Bfrtip', scrollX = T, scrollCollapse = T, buttons = c('copy', 'csv', 'excel', 'pdf', 'print')))
#myvars <- c("v1", "v2", "v3")
#newdata <- mydata[myvars]
datatable(df_DE2[,:], caption = "Final list DeSEQ2", extensions = c('Buttons', 'FixedColumns'), "Autofill", options = list(dom = 'Bfrtip', scrollX = T, scrollCollapse = T, buttons = c('copy', 'csv', 'excel', 'pdf', 'print')))
#myvars <- c("v1", "v2", "v3")
#newdata <- mydata[myvars]
datatable(df_DE2[,1:2], caption = "Final list DeSEQ2", extensions = c('Buttons', 'FixedColumns'), "Autofill", options = list(dom = 'Bfrtip', scrollX = T, scrollCollapse = T, buttons = c('copy', 'csv', 'excel', 'pdf', 'print')))
#myvars <- c("v1", "v2", "v3")
#newdata <- mydata[myvars]
datatable(df_DE[,1:2], caption = "Final list DeSEQ2", extensions = c('Buttons', 'FixedColumns'), "Autofill", options = list(dom = 'Bfrtip', scrollX = T, scrollCollapse = T, buttons = c('copy', 'csv', 'excel', 'pdf', 'print')))
df_DE <- read.table("./multiqc_data/multiqc_general_stats.txt", header=TRUE, sep="\t")
df_DE2 <- as.data.frame(df_DE)
#myvars <- c("v1", "v2", "v3")
#newdata <- mydata[myvars]
datatable(df_DE[,1:2], caption = "Final list DeSEQ2", extensions = c('Buttons', 'FixedColumns'), "Autofill", options = list(dom = 'Bfrtip', scrollX = T, scrollCollapse = T, buttons = c('copy', 'csv', 'excel', 'pdf', 'print')))
#myvars <- c("v1", "v2", "v3")
#newdata <- mydata[myvars]
datatable(df_DE[,2:], caption = "Final list DeSEQ2", extensions = c('Buttons', 'FixedColumns'), "Autofill", options = list(dom = 'Bfrtip', scrollX = T, scrollCollapse = T, buttons = c('copy', 'csv', 'excel', 'pdf', 'print')))
#myvars <- c("v1", "v2", "v3")
#newdata <- mydata[myvars]
datatable(df_DE[,-1], caption = "Final list DeSEQ2", extensions = c('Buttons', 'FixedColumns'), "Autofill", options = list(dom = 'Bfrtip', scrollX = T, scrollCollapse = T, buttons = c('copy', 'csv', 'excel', 'pdf', 'print')))
#myvars <- c("v1", "v2", "v3")
#newdata <- mydata[myvars]
datatable(df_DE, caption = "Final list DeSEQ2", escape = 1, extensions = c('Buttons', 'FixedColumns'), "Autofill", options = list(dom = 'Bfrtip', scrollX = T, scrollCollapse = T, buttons = c('copy', 'csv', 'excel', 'pdf', 'print')))
library(tidyverse)
library("tidyverse"")
library("tidyverse")
install.packages("tidyverse")
library(tidyverse)
library(tidyverse)
library(tidyverse)
df_DE <- read.table("./multiqc_data/multiqc_general_stats.txt", header=TRUE, sep="\t")
names(df_DE)
columns <- c("featureCounts_mqc-generalstats-featurecounts-percent_assigned", "featureCounts_mqc-generalstats-featurecounts-Assigned",
"STAR_mqc-generalstats-star-uniquely_mapped_percent", "Cutadapt_mqc-generalstats-cutadapt-percent_trimmed",
"FastQC_mqc-generalstats-fastqc-percent_duplicates", "FastQC_mqc-generalstats-fastqc-percent_gc",
"FastQC_mqc-generalstats-fastqc-total_sequences")
df_DE_selected = df_DE %>% select(contains(columns))
df_DE_selected = df_DE %>% select(contains("columns"))
df_DE_selected = df_DE %>% select(one_of(columns))
df_DE <- read.table("./multiqc_data/multiqc_general_stats.txt", header=TRUE, sep="\t")
columns <- c("featureCounts_mqc-generalstats-featurecounts-percent_assigned", "featureCounts_mqc-generalstats-featurecounts-Assigned",
"STAR_mqc-generalstats-star-uniquely_mapped_percent", "Cutadapt_mqc-generalstats-cutadapt-percent_trimmed",
"FastQC_mqc-generalstats-fastqc-percent_duplicates", "FastQC_mqc-generalstats-fastqc-percent_gc",
"FastQC_mqc-generalstats-fastqc-total_sequences")
df_DE_selected = df_DE %>% select(one_of(columns))
colnames(df_DE)
Sys.setlocale("LC_NUMERIC", "en_GB.UTF-8")
df_DE <- read.table("./multiqc_data/multiqc_general_stats.txt", header=TRUE, sep="\t")
columns <- c("featureCounts_mqc-generalstats-featurecounts-percent_assigned", "featureCounts_mqc-generalstats-featurecounts-Assigned",
"STAR_mqc-generalstats-star-uniquely_mapped_percent", "Cutadapt_mqc-generalstats-cutadapt-percent_trimmed",
"FastQC_mqc-generalstats-fastqc-percent_duplicates", "FastQC_mqc-generalstats-fastqc-percent_gc",
"FastQC_mqc-generalstats-fastqc-total_sequences")
df_DE_selected = df_DE %>% select(one_of(columns))
df_DE2 = as.data.frame(df_DE)
columns <- c("featureCounts_mqc-generalstats-featurecounts-percent_assigned", "featureCounts_mqc-generalstats-featurecounts-Assigned",
"STAR_mqc-generalstats-star-uniquely_mapped_percent", "Cutadapt_mqc-generalstats-cutadapt-percent_trimmed",
"FastQC_mqc-generalstats-fastqc-percent_duplicates", "FastQC_mqc-generalstats-fastqc-percent_gc",
"FastQC_mqc-generalstats-fastqc-total_sequences")
df_DE_selected = df_DE %>% select(one_of(columns))
colnames(df_DE)
df_DE_selected = df_DE %>% select(one_of("featureCounts_mqc-generalstats-featurecounts-percent_assigned"))
df_DE <- read.table("./multiqc_data/multiqc_general_stats.txt", header=TRUE, sep="\t")
#df_DE2 = as.data.frame(df_DE)
columns <- c("featureCounts_mqc-generalstats-featurecounts-percent_assigned", "featureCounts_mqc.generalstats.featurecounts.Assigned",
"STAR_mqc.generalstats.star.uniquely_mapped_percent", "Cutadapt_mqc.generalstats.cutadapt.percent_trimmed",
"FastQC_mqc.generalstats.fastqc.percent_duplicates", "FastQC_mqc.generalstats.fastqc.percent_gc",
"FastQC_mqc.generalstats.fastqc.total_sequences")
df_DE_selected = df_DE %>% select(one_of(columns))
#df_DE2 = as.data.frame(df_DE)
columns <- c("featureCounts_mqc.generalstats.featurecounts.percent_assigned", "featureCounts_mqc.generalstats.featurecounts.Assigned",
"STAR_mqc.generalstats.star.uniquely_mapped_percent", "Cutadapt_mqc.generalstats.cutadapt.percent_trimmed",
"FastQC_mqc.generalstats.fastqc.percent_duplicates", "FastQC_mqc.generalstats.fastqc.percent_gc",
"FastQC_mqc.generalstats.fastqc.total_sequences")
df_DE_selected = df_DE %>% select(one_of(columns))
View(df_DE_selected)
View(df_DE_selected)
View(df_DE_selected)
columns <- c("Sample", "featureCounts_mqc.generalstats.featurecounts.percent_assigned", "featureCounts_mqc.generalstats.featurecounts.Assigned",
"STAR_mqc.generalstats.star.uniquely_mapped_percent", "Cutadapt_mqc.generalstats.cutadapt.percent_trimmed",
"FastQC_mqc.generalstats.fastqc.percent_duplicates", "FastQC_mqc.generalstats.fastqc.percent_gc",
"FastQC_mqc.generalstats.fastqc.total_sequences")
df_DE_selected = df_DE %>% select(one_of(columns))
View(df_DE_selected)
datatable(df_DE[,-1], caption = "Final list DeSEQ2", colnames= ("Sample Name", "% Assigned", "Assigned", "% Trimmed", "% Dups", "% GC", "Seqs"), extensions = c('Buttons', 'FixedColumns'), "Autofill", options = list(dom = 'Bfrtip', scrollX = T, scrollCollapse = T, buttons = c('copy', 'csv', 'excel', 'pdf', 'print')))
datatable(df_DE[,-1], caption = "Final list DeSEQ2", colnames= c("Sample Name", "% Assigned", "Assigned", "% Trimmed", "% Dups", "% GC", "Seqs"), extensions = c('Buttons', 'FixedColumns'), "Autofill", options = list(dom = 'Bfrtip', scrollX = T, scrollCollapse = T, buttons = c('copy', 'csv', 'excel', 'pdf', 'print')))
df_DE <- read.table("./multiqc_data/multiqc_general_stats.txt", header=TRUE, sep="\t")
columns <- c("Sample", "featureCounts_mqc.generalstats.featurecounts.percent_assigned", "featureCounts_mqc.generalstats.featurecounts.Assigned",
"STAR_mqc.generalstats.star.uniquely_mapped_percent", "Cutadapt_mqc.generalstats.cutadapt.percent_trimmed",
"FastQC_mqc.generalstats.fastqc.percent_duplicates", "FastQC_mqc.generalstats.fastqc.percent_gc",
"FastQC_mqc.generalstats.fastqc.total_sequences")
df_DE_selected = df_DE %>% select(one_of(columns))
datatable(df_DE[,-1], caption = "Final list DeSEQ2", colnames= c("Sample Name", "% Assigned", "Assigned", "% Trimmed", "% Dups", "% GC", "Seqs"), extensions = c('Buttons', 'FixedColumns'), "Autofill", options = list(dom = 'Bfrtip', scrollX = T, scrollCollapse = T, buttons = c('copy', 'csv', 'excel', 'pdf', 'print')))
datatable(df_DE[,-1], caption = "Final list DeSEQ2", colnames= c("Sample Name", "% Assigned", "Assigned", "% Aligned", "% Trimmed", "% Dups", "% GC", "Seqs"), extensions = c('Buttons', 'FixedColumns'), "Autofill", options = list(dom = 'Bfrtip', scrollX = T, scrollCollapse = T, buttons = c('copy', 'csv', 'excel', 'pdf', 'print')))
datatable(df_DE, caption = "Final list DeSEQ2", colnames= c("Sample Name", "% Assigned", "Assigned", "% Aligned", "% Trimmed", "% Dups", "% GC", "Seqs"), extensions = c('Buttons', 'FixedColumns'), "Autofill", options = list(dom = 'Bfrtip', scrollX = T, scrollCollapse = T, buttons = c('copy', 'csv', 'excel', 'pdf', 'print')))
datatable(df_DE_selected, caption = "Final list DeSEQ2", colnames= c("Sample Name", "% Assigned", "Assigned", "% Aligned", "% Trimmed", "% Dups", "% GC", "Seqs"), extensions = c('Buttons', 'FixedColumns'), "Autofill", options = list(dom = 'Bfrtip', scrollX = T, scrollCollapse = T, buttons = c('copy', 'csv', 'excel', 'pdf', 'print')))
library(tidyverse)
library(tidyverse)
library(TD)
library(DT)
library(tidyverse)
datatable(df_DE_selected, caption = "Final list DeSEQ2", colnames= c("Sample Name", "% Assigned", "Assigned", "% Aligned", "% Trimmed", "% Dups", "% GC", "Seqs"), extensions = c('Buttons', 'FixedColumns'), "Autofill", options = list(dom = 'Bfrtip', scrollX = T, scrollCollapse = T, buttons = c('copy', 'csv', 'excel', 'pdf', 'print'))pageLength = 10, lengthMenu = c(5, 10, 20, n_rows))
datatable(df_DE_selected, caption = "Final list DeSEQ2", colnames= c("Sample Name", "% Assigned", "Assigned", "% Aligned", "% Trimmed", "% Dups", "% GC", "Seqs"), extensions = c('Buttons', 'FixedColumns'), "Autofill", options = list(dom = 'Bfrtip', scrollX = T, scrollCollapse = T, buttons = c('copy', 'csv', 'excel', 'pdf', 'print')),pageLength = 10, lengthMenu = c(5, 10, 20, n_rows))
datatable(df_DE_selected, caption = "Final list DeSEQ2", colnames= c("Sample Name", "% Assigned", "Assigned", "% Aligned", "% Trimmed", "% Dups", "% GC", "Seqs"), extensions = c('Buttons', 'FixedColumns'), "Autofill", options = list(dom = 'Bfrtip', scrollX = T, scrollCollapse = T, buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),pageLength = 10, lengthMenu = c(5, 10, 20, n_rows))
datatable(df_DE_selected, caption = "Final list DeSEQ2", colnames= c("Sample Name", "% Assigned", "Assigned", "% Aligned", "% Trimmed", "% Dups", "% GC", "Seqs"), extensions = c('Buttons', 'FixedColumns'), "Autofill", options = list(dom = 'Bfrtip', scrollX = T, scrollCollapse = T, buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),pageLength = 10, lengthMenu = c(5, 10, 20, n_rows)))
datatable(df_DE_selected, caption = "Final list DeSEQ2", colnames= c("Sample Name", "% Assigned", "Assigned", "% Aligned", "% Trimmed", "% Dups", "% GC", "Seqs"), extensions = c('Buttons', 'FixedColumns'), "Autofill", options = list(dom = 'Bfrtip', scrollX = T, scrollCollapse = T, buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),pageLength = 10, lengthMenu = c(5, 10, 20, n_rows)))
datatable(df_DE_selected, caption = "Final list DeSEQ2", colnames= c("Sample Name", "% Assigned", "Assigned", "% Aligned", "% Trimmed",
"% Dups", "% GC", "Seqs"), extensions = c('Buttons', 'FixedColumns'), "Autofill", options = list(dom = 'Bfrtip', scrollX = T, scrollCollapse = T, buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),pageLength = 10, lengthMenu = c(5, 10, 20, n_rows)))
n_rows = nrows(df_DE_selected)
datatable(df_DE_selected, caption = "Final list DeSEQ2", colnames= c("Sample Name", "% Assigned", "Assigned", "% Aligned", "% Trimmed",
"% Dups", "% GC", "Seqs"), extensions = c('Buttons', 'FixedColumns'), "Autofill", options = list(dom = 'Bfrtip', scrollX = T, scrollCollapse = T, buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),pageLength = 10, lengthMenu = c(5, 10, 20, n_rows)))
n_rows = nrows(df_DE_selected)
n_rows = nrow(df_DE_selected)
datatable(df_DE_selected, caption = "Final list DeSEQ2", colnames= c("Sample Name", "% Assigned", "Assigned", "% Aligned", "% Trimmed",
"% Dups", "% GC", "Seqs"), extensions = c('Buttons', 'FixedColumns'), "Autofill", options = list(dom = 'Bfrtip', scrollX = T, scrollCollapse = T, buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),pageLength = 10, lengthMenu = c(5, 10, 20, n_rows)))
datatable(df_DE_selected, caption = "Final list DeSEQ2", colnames= c("Sample Name", "% Assigned", "Assigned", "% Aligned", "% Trimmed",
"% Dups", "% GC", "Seqs"), extensions = c('Buttons', 'FixedColumns'), "Autofill", options = list(dom = 'Bfrtip', scrollX = T, scrollCollapse = T, buttons = c('copy', 'csv', 'excel', 'pdf', 'print'), pageLength = 5, lengthMenu = c(5, 10, 20, n_rows)))
datatable(df_DE_selected, caption = "Final list DeSEQ2", colnames= c("Sample Name", "% Assigned", "Assigned", "% Aligned", "% Trimmed",
"% Dups", "% GC", "Seqs"), extensions = c('Buttons', 'FixedColumns'), "Autofill", options = list(dom = 'Bfrtip', scrollX = T, scrollCollapse = T, buttons = c('copy', 'csv', 'excel', 'pdf', 'print'), pageLength = 10, lengthMenu = c(5, 10, 20, n_rows)))
# Import a .csv file outputted by the rnaseq Neytflow pipeline
versions <- read.csv(file="./pipeline_info/software_versions.csv", header=TRUE, sep=",")
versions
# Import a .csv file outputted by the rnaseq Neytflow pipeline
versions <- read.csv(file="./pipeline_info/software_versions.csv", header=TRUE, sep="\t")
versions <- read.csv(file="./pipeline_info/software_versions.csv", header=TRUE, sep="\t")
# Import a .csv file outputted by the rnaseq Neytflow pipeline
versions
??read.csv
?read.csv
# Import a .csv file outputted by the rnaseq Neytflow pipeline
versions <- read.csv(file="./pipeline_info/software_versions.csv", header=TRUE, sep="\t", header = FALSE)
# Import a .csv file outputted by the rnaseq Neytflow pipeline
versions <- read.csv(file="./pipeline_info/software_versions.csv", sep="\t", header = FALSE)
versions
versions$nf-core/rnaseq
versions$Nextflow
versions["Nextflow",V2]
versions["Nextflow",]
versions[2,]
versions[2,"V2"]
versions$1
versions[1,]
versions[,1]
versions[,0]
versions[,"HISAT2"]
?"["
df = as.data.frame(versions)
df
df[1]
versions[1]
subset(df, V1 == "MultiQC")
subset(df, V1 == "MultiQC")$V2
subset(df, V1 == "MultiQC")[2]
a = subset(df, V1 == "MultiQC")[2]
a
print(a)
a=toString(a)
a
a[1,1]
a[[1,1]]
a[[0,0]]
a[0,0]
a[0,1]
# read in the different software versions ...
a = subset(df, V1 == "MultiQC")[2]
a = as.character(a)
a
a = subset(df, V1 == "MultiQC")[2]
a
df$V1
df[df$V1=="MultiQC"]
df[df$V1=="MultiQC",]
df[df$V1=="MultiQC",V2]
df[df$V1=="MultiQC",2]
b = df[df$V1=="MultiQC",2]
b
b = as.character(b)
b
df$V1
rnaseq = as.character(df[df$V1=="rnaseq",2])
rnaseq
rnaseq = as.character(df[df$V1=="nf-core/rnaseq",2])
rnaseq
MultiQC = as.character(df[df$V1=="MultiQC",2])
for item in df$V1:
for item in df$V1: print (item)
for (item in df$V1): print (item)
for (item in df$V1){print (item)}
# HISAT2 = as.character(df[df$V1=="HISAT2",2])
# Picard = as.character(df[df$V1=="Picard",2])
# MarkDuplicates = as.character(df[df$V1=="MarkDuplicates",2])
# Samtools = as.character(df[df$V1=="Samtools",2])
# featureCounts = as.character(df[df$V1=="featureCounts",2])
# StringTie = as.character(df[df$V1=="StringTie",2])
# Preseq = as.character(df[df$V1=="Preseq",2])
# deepTools = as.character(df[df$V1=="deepTools",2])
# RSeQC = as.character(df[df$V1=="RSeQC",2])
# MultiQC = as.character(df[df$V1=="MultiQC",2])
for (item in df$V1){
version = as.character(df[df$V1=="item",2])
print(version)
}
item = "MultiQC"
df[df$V1=="item",2]
df[df$V1==item,2]
# HISAT2 = as.character(df[df$V1=="HISAT2",2])
# Picard = as.character(df[df$V1=="Picard",2])
# MarkDuplicates = as.character(df[df$V1=="MarkDuplicates",2])
# Samtools = as.character(df[df$V1=="Samtools",2])
# featureCounts = as.character(df[df$V1=="featureCounts",2])
# StringTie = as.character(df[df$V1=="StringTie",2])
# Preseq = as.character(df[df$V1=="Preseq",2])
# deepTools = as.character(df[df$V1=="deepTools",2])
# RSeQC = as.character(df[df$V1=="RSeQC",2])
# MultiQC = as.character(df[df$V1=="MultiQC",2])
for (item in df$V1){
version = as.character(df[df$V1==item,2])
print(version)
}
# HISAT2 = as.character(df[df$V1=="HISAT2",2])
# Picard = as.character(df[df$V1=="Picard",2])
# MarkDuplicates = as.character(df[df$V1=="MarkDuplicates",2])
# Samtools = as.character(df[df$V1=="Samtools",2])
# featureCounts = as.character(df[df$V1=="featureCounts",2])
# StringTie = as.character(df[df$V1=="StringTie",2])
# Preseq = as.character(df[df$V1=="Preseq",2])
# deepTools = as.character(df[df$V1=="deepTools",2])
# RSeQC = as.character(df[df$V1=="RSeQC",2])
# MultiQC = as.character(df[df$V1=="MultiQC",2])
versions = ()
# HISAT2 = as.character(df[df$V1=="HISAT2",2])
# Picard = as.character(df[df$V1=="Picard",2])
# MarkDuplicates = as.character(df[df$V1=="MarkDuplicates",2])
# Samtools = as.character(df[df$V1=="Samtools",2])
# featureCounts = as.character(df[df$V1=="featureCounts",2])
# StringTie = as.character(df[df$V1=="StringTie",2])
# Preseq = as.character(df[df$V1=="Preseq",2])
# deepTools = as.character(df[df$V1=="deepTools",2])
# RSeQC = as.character(df[df$V1=="RSeQC",2])
# MultiQC = as.character(df[df$V1=="MultiQC",2])
versions <- ()
# HISAT2 = as.character(df[df$V1=="HISAT2",2])
# Picard = as.character(df[df$V1=="Picard",2])
# MarkDuplicates = as.character(df[df$V1=="MarkDuplicates",2])
# Samtools = as.character(df[df$V1=="Samtools",2])
# featureCounts = as.character(df[df$V1=="featureCounts",2])
# StringTie = as.character(df[df$V1=="StringTie",2])
# Preseq = as.character(df[df$V1=="Preseq",2])
# deepTools = as.character(df[df$V1=="deepTools",2])
# RSeQC = as.character(df[df$V1=="RSeQC",2])
# MultiQC = as.character(df[df$V1=="MultiQC",2])
versions = list()
versions.append(version)
for (item in df$V1){
version = as.character(df[df$V1==item,2])
print(version)
versions.append(version)
}
# HISAT2 = as.character(df[df$V1=="HISAT2",2])
# Picard = as.character(df[df$V1=="Picard",2])
# MarkDuplicates = as.character(df[df$V1=="MarkDuplicates",2])
# Samtools = as.character(df[df$V1=="Samtools",2])
# featureCounts = as.character(df[df$V1=="featureCounts",2])
# StringTie = as.character(df[df$V1=="StringTie",2])
# Preseq = as.character(df[df$V1=="Preseq",2])
# deepTools = as.character(df[df$V1=="deepTools",2])
# RSeQC = as.character(df[df$V1=="RSeQC",2])
# MultiQC = as.character(df[df$V1=="MultiQC",2])
versions = list()
for (item in df$V1){
version = as.character(df[df$V1==item,2])
print(version)
list.append(versions, version)
}
??append
??list.append
for (item in df$V1){
version = as.character(df[df$V1==item,2])
print(version)
append(versions, version)
}
print(versions)
# HISAT2 = as.character(df[df$V1=="HISAT2",2])
# Picard = as.character(df[df$V1=="Picard",2])
# MarkDuplicates = as.character(df[df$V1=="MarkDuplicates",2])
# Samtools = as.character(df[df$V1=="Samtools",2])
# featureCounts = as.character(df[df$V1=="featureCounts",2])
# StringTie = as.character(df[df$V1=="StringTie",2])
# Preseq = as.character(df[df$V1=="Preseq",2])
# deepTools = as.character(df[df$V1=="deepTools",2])
# RSeQC = as.character(df[df$V1=="RSeQC",2])
# MultiQC = as.character(df[df$V1=="MultiQC",2])
versions = list()
for (item in df$V1){
version = as.character(df[df$V1==item,2])
print(version)
append(versions, version)
}
print(versions)
for (item in df$V1){
version = as.character(df[df$V1==item,2])
print(version)
append(versions, version)
print(versions)
}
# HISAT2 = as.character(df[df$V1=="HISAT2",2])
# Picard = as.character(df[df$V1=="Picard",2])
# MarkDuplicates = as.character(df[df$V1=="MarkDuplicates",2])
# Samtools = as.character(df[df$V1=="Samtools",2])
# featureCounts = as.character(df[df$V1=="featureCounts",2])
# StringTie = as.character(df[df$V1=="StringTie",2])
# Preseq = as.character(df[df$V1=="Preseq",2])
# deepTools = as.character(df[df$V1=="deepTools",2])
# RSeQC = as.character(df[df$V1=="RSeQC",2])
# MultiQC = as.character(df[df$V1=="MultiQC",2])
versions <- c()
for (item in df$V1){
version = as.character(df[df$V1==item,2])
print(version)
versions <- c(versions,version)
print(versions)
}
versions <- c(versions,version)
# HISAT2 = as.character(df[df$V1=="HISAT2",2])
# Picard = as.character(df[df$V1=="Picard",2])
# MarkDuplicates = as.character(df[df$V1=="MarkDuplicates",2])
# Samtools = as.character(df[df$V1=="Samtools",2])
# featureCounts = as.character(df[df$V1=="featureCounts",2])
# StringTie = as.character(df[df$V1=="StringTie",2])
# Preseq = as.character(df[df$V1=="Preseq",2])
# deepTools = as.character(df[df$V1=="deepTools",2])
# RSeQC = as.character(df[df$V1=="RSeQC",2])
# MultiQC = as.character(df[df$V1=="MultiQC",2])
versions <- c()
for (item in df$V1){
version = as.character(df[df$V1==item,2])
print(version)
versions <- c(versions,version)
print(versions)
}
print(versions)
# HISAT2 = as.character(df[df$V1=="HISAT2",2])
# Picard = as.character(df[df$V1=="Picard",2])
# MarkDuplicates = as.character(df[df$V1=="MarkDuplicates",2])
# Samtools = as.character(df[df$V1=="Samtools",2])
# featureCounts = as.character(df[df$V1=="featureCounts",2])
# StringTie = as.character(df[df$V1=="StringTie",2])
# Preseq = as.character(df[df$V1=="Preseq",2])
# deepTools = as.character(df[df$V1=="deepTools",2])
# RSeQC = as.character(df[df$V1=="RSeQC",2])
# MultiQC = as.character(df[df$V1=="MultiQC",2])
versions <- c()
for (item in df$V1){
version = as.character(df[df$V1==item,2])
print(version)
versions <- c(versions,version)
}
print(versions)
df[df$V1=="STAR",2]
View(df)
# Import a .csv file outputted by the rnaseq Neytflow pipeline
versions <- read.csv(file="./pipeline_info/software_versions.csv", sep="\t", header = FALSE)
# Import a .csv file outputted by the rnaseq Neytflow pipeline
df <- read.csv(file="./pipeline_info/software_versions.csv", sep="\t", header = FALSE)
x = "STAR_blabla"
b = strsplit(x)
b = strsplit(x, split="")
b
b[-5:]
b[[-5:]9
b[[-5:]]
b[[1]]
b[[1]][5]
b[[1]][-5:]
b[[1]][5:]
b[[1]][5,]
b[[1]][-5]
b[[1]][-1:5]
b[[1]][:5]
typeof(b)
b[5:]
b[[1]][5:]
substr(x, 6,)
substr(x, 6, length(x))
x
substring(x, 6, )
packageVersion('edgeR')
# Import a .tsv file downloadable from https://portal.qbic.uni-tuebingen.de/portal/web/qbic/user-database, under pojects
df <- read.csv(file="./summary.tsv", sep="\t", header = FALSE)
View(df)
# Import a .tsv file downloadable from https://portal.qbic.uni-tuebingen.de/portal/web/qbic/user-database, under pojects
df <- read.csv(file="./summary.tsv", sep="\t", header = TRUE)
View(df)
projectcode = as.character(df$Sub_Project)
projectcode
projectcode = as.character(df$Sub.Project)
projectcode
title = as.character(df$Short.Title)
View(df)
View(df)
# Import a .tsv file downloadable from https://portal.qbic.uni-tuebingen.de/portal/web/qbic/user-database, under pojects
df <- read.csv(file="./summary.tsv", sep="\t", header = TRUE)
projectcode = as.character(df$Sub.Project)
title = as.character(df$Short.Title)
PI = as.character(df$Principal.Investigator)
PIaddress = as.character(df$PI.Adress)
PM = as.character(df$Project.Manager)
```{r}
```{r}
read.csv
# Import a .tsv file downloadable from https://portal.qbic.uni-tuebingen.de/portal/web/qbic/user-database, under pojects
df <- read.csv(file="./summary.tsv", sep="\t", header = TRUE)
projectcode = as.character(df$Sub.Project)
title = as.character(df$Short.Title)
PI = as.character(df$Principal.Investigator)
PIaddress = as.character(df$PI.Adress)
PM = as.character(df$Project.Manager)
df <- read.csv(file="./summary.tsv", sep="\t", header = TRUE)
projectcode = as.character(df$Sub.Project)
title = as.character(df$Short.Title)
PI = as.character(df$Principal.Investigator)
PIaddress = as.character(df$PI.Adress)
PM = as.character(df$Project.Manager)
# Import a .tsv file downloadable from https://portal.qbic.uni-tuebingen.de/portal/web/qbic/user-database, under pojects
library(rmarkdown)
setwd("~/Documents/QBOBA_Rreport_test/report")
```{r}
df <- read.csv(file="./summary.tsv", sep="\t", header = TRUE)
df <- read.csv(file="./summary.tsv", sep="\t", header = TRUE)
```{r, bootstrap.show.message=FALSE, echo=FALSE, message=FALSE}
df <- read.csv(file="./summary.tsv", sep="\t", header = TRUE)
render(params = list(rep_title = as.character(df$Short.Title)))
df <- read.csv(file="./summary.tsv", sep="\t", header = TRUE)
PI_address = as.character(df$PI.Adress)
